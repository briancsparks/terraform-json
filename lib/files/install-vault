#!/bin/bash -e

readlink_f() { which greadlink > /dev/null && greadlink -f $1 || readlink -f $1; }
script_dir="$( cd "$(dirname "$( readlink_f "${BASH_SOURCE[0]}" )" )" && pwd )"

errcho() { echo "$@" 1>&2; }
die() { errcho "$@"; exit 1; }

# See: https://github.com/hashicorp/terraform-aws-vault/blob/master/modules/install-vault/install-vault

cd /tmp/
curl -sSL -o "vault.zip" "https://releases.hashicorp.com/vault/1.5.4/vault_1.5.4_linux_amd64.zip"
unzip vault.zip
chmod +x vault
sudo mv vault /usr/local/bin


exit 0


readonly DOWNLOAD_PACKAGE_PATH="/tmp/vault.zip"
readonly SYSTEM_BIN_DIR="/usr/local/bin"



# For more info, see: https://www.vaultproject.io/docs/configuration/#disable_mlock
function configure_mlock {
  echo "Giving Vault permission to use the mlock syscall"
  # Requires installing libcap2-bin on Ubuntu 18
  sudo setcap cap_ipc_lock=+ep $(readlink -f $(which vault))
}


function create_vault_user {
  local -r username="$1"

  if $(user_exists "$username"); then
    echo "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    sudo useradd --system "$username"
  fi
}

function create_vault_install_paths {
  local -r path="$1"
  local -r username="$2"

  log_info "Creating install dirs for Vault at $path"
  sudo mkdir -p "$path"
  sudo mkdir -p "$path/bin"
  sudo mkdir -p "$path/config"
  sudo mkdir -p "$path/data"
  sudo mkdir -p "$path/tls"
  sudo mkdir -p "$path/scripts"
  sudo chmod 755 "$path"
  sudo chmod 755 "$path/bin"
  sudo chmod 755 "$path/data"

  log_info "Changing ownership of $path to $username"
  sudo chown -R "$username:$username" "$path"
}

function fetch_binary {
  local -r version="$1"
  local download_url="$2"

  if [[ -z "$download_url" && -n "$version" ]];  then
    download_url="https://releases.hashicorp.com/vault/${version}/vault_${version}_linux_amd64.zip"
  fi

  retry \
    "curl -o '$DOWNLOAD_PACKAGE_PATH' '$download_url' --location --silent --fail --show-error" \
    "Downloading Vault to $DOWNLOAD_PACKAGE_PATH"
}

function install_binary {
  local -r install_path="$1"
  local -r username="$2"

  local -r bin_dir="$install_path/bin"
  local -r vault_dest_path="$bin_dir/vault"
  local -r run_vault_dest_path="$bin_dir/run-vault"

  unzip -d /tmp "$DOWNLOAD_PACKAGE_PATH"

  log_info "Moving Vault binary to $vault_dest_path"
  sudo mv "/tmp/vault" "$vault_dest_path"
  sudo chown "$username:$username" "$vault_dest_path"
  sudo chmod a+x "$vault_dest_path"

  local -r symlink_path="$SYSTEM_BIN_DIR/vault"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $vault_dest_path in $symlink_path"
    sudo ln -s "$vault_dest_path" "$symlink_path"
  fi

  log_info "Copying Vault run script to $run_vault_dest_path"
  sudo cp "$SCRIPT_DIR/../run-vault/run-vault" "$run_vault_dest_path"
  sudo chown "$username:$username" "$run_vault_dest_path"
  sudo chmod a+x "$run_vault_dest_path"
}






#  Main

# ??????
user="vault"
path="/opt/vault"


# Now, install
sudo apt-get update -y
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl unzip jq libcap2-bin

create_vault_user "$user"
create_vault_install_paths "$path" "$user"
fetch_binary "$version" "$download_url"
install_binary "$path" "$user"
configure_mlock

