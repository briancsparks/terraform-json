#!/bin/bash -e

# See: https://blog.ruanbekker.com/blog/2019/05/06/setup-hashicorp-vault-server-on-docker-and-cli-guide/
# See: https://blog.ruanbekker.com/blog/2019/05/07/persist-vault-data-with-amazon-s3-as-a-storage-backend/


# ---------------------------------------------------------------------------------------------------------------------
function create_vault_config_s3_json {
  cat - << EOF | sudo tee /etc/vault.d/vault.json

{
  "backend": {
    "s3": {
      "region": "us-east-1",
      "bucket": "cdr0-vault"
    }
  },
  "listener": {
    "tcp":{
      "address": "0.0.0.0:8200",
      "tls_disable": 1
    }
  },
  "ui": true
}

EOF
}

# ---------------------------------------------------------------------------------------------------------------------
# Configure systemd
function configure_systemd() {
  sudo touch /etc/systemd/system/vault.service

  cat << EOF | sudo tee /etc/systemd/system/vault.service

[Unit]
Description="HashiCorp Vault - A tool for managing secrets"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
# ConditionFileNotEmpty=/etc/vault.d/vault.hcl
ConditionFileNotEmpty=/etc/vault.d/vault.json
# StartLimitIntervalSec=60
StartLimitBurst=3

[Service]
User=vault
Group=vault
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
NoNewPrivileges=yes
# ExecStart=/usr/bin/vault server -config=/etc/vault.d/vault.hcl
ExecStart=/usr/bin/vault server -config=/etc/vault.d/vault.json
ExecReload=/bin/kill --signal HUP $MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitInterval=60
# StartLimitIntervalSec=60
StartLimitBurst=3
LimitNOFILE=65536
LimitMEMLOCK=infinity

[Install]
WantedBy=multi-user.target
EOF

}



# =====================================================================================================================
# main

mkdir -p "${HOME}/oldfiles"

# ---------------------------------------------------------------------------------------------------------------------
# Pre-requisites
sudo apt-get update -y
sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl unzip jq libcap2-bin

# ---------------------------------------------------------------------------------------------------------------------
# mlock
sudo setcap cap_ipc_lock=+ep $(readlink -f $(which vault))


# ---------------------------------------------------------------------------------------------------------------------
# Install vault from hashicorps apt repo
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update
sudo apt-get install -y --no-install-recommends vault

# You will get:
# /opt/vault/
# ├── data
# └── tls
#     ├── tls.crt
#     └── tls.key
# /etc/vault.d/
# └── vault.hcl

# The vault.hcl is setup to store data in file at /opt/vault/data, and to use the cert

# ---------------------------------------------------------------------------------------------------------------------
# Replace vault.hcl with vault.json
cp /etc/vault.d/* "${HOME}/oldfiles/"
create_vault_config_s3_json
configure_systemd


# ---------------------------------------------------------------------------------------------------------------------
# Start systemd for vault server
sudo systemctl enable vault
sudo systemctl start  vault
sudo systemctl status vault

echo "Unseal the vault with:"
echo ""
echo "  vault operator unseal c96u8TI8kEEbfBqlZDGQnpH04rIlxynHZz+MPUJP3Isa"
echo "  vault operator unseal ..."
echo "  vault operator unseal ..."
echo ""
echo "Then, once its unsealed:"
echo ""
echo "  vault status -format=json | jq ."
echo ""
echo "Then, login:"
echo ""
echo "  vault login s.sUPEcL9F9TorK4s0mRPL7Fbq"
echo ""



exit 0

# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Other

# Use an already unzipped version from our own S3
function install_from_s3 {
  sudo aws s3 cp s3://quick-net/deploy/cdr0-net/vault_1.4.2_linux_amd64 /usr/local/bin/vault
  sudo chmod 0755 /usr/local/bin/vault
}



# ## Notes:
#
# With vault running on a non-public subnet at 10.23.0.32, and doing the following from my laptop, with VPN running.


# 19958  export VAULT_ADDR="http://10.23.0.32:8200"
# 19959  vault operator init -key-shares=6 -key-threshold=3

#
# Unseal Key 1: c96u8TI8kEEbfBqlZDGQnpH04rIlxynHZz+MPUJP3Isa
# Unseal Key 2: HUTnzKmh3CpNzky3x3eQrtIJkql4/CAK2DFl5DeMOG1v
# Unseal Key 3: RgjsQCt9/A2BxAKqCNKl3lz48AQAptgekQX+WgoaelXx
# Unseal Key 4: 60IV2rBbnqB1uVQxba9+QLrs2Y+HPgyEfEPAkTLHWoGK
# Unseal Key 5: hbaG6UVtBUyH6vV570c+01rgcBk4SP6k1u78K3ebEmtt
# Unseal Key 6: uynRwGXeF4IsanSBxrfGp+/V9JL92mw9f7X4SlvZ5G+X
#
# Initial Root Token: s.sUPEcL9F9TorK4s0mRPL7Fbq
#
# Vault initialized with 6 key shares and a key threshold of 3. Please securely
# distribute the key shares printed above. When the Vault is re-sealed,
# restarted, or stopped, you must supply at least 3 of these keys to unseal it
# before it can start servicing requests.
#
# Vault does not store the generated master key. Without at least 3 key to
# reconstruct the master key, Vault will remain permanently sealed!
#
# It is possible to generate new unseal keys, provided you have a quorum of
# existing unseal keys shares. See "vault operator rekey" for more information.

# 19960  vault operator unseal c96u8TI8kEEbfBqlZDGQnpH04rIlxynHZz+MPUJP3Isa
# 19961  vault operator unseal HUTnzKmh3CpNzky3x3eQrtIJkql4/CAK2DFl5DeMOG1v
# 19962  vault operator unseal RgjsQCt9/A2BxAKqCNKl3lz48AQAptgekQX+WgoaelXx

# 19963  vault status -format=json
# 19964  vault status -format=json | jq .
# 19965  vault login s.sUPEcL9F9TorK4s0mRPL7Fbq
# 19966  vault secrets enable -version=1 -path=secret kv

# Can open in Chrome: http://10.23.0.32:8200/ui

# 19967  vault kv put secret/cdr0-net/pw pw=123456
# 19968  vault kv list secret/
# 19969  vault kv get cdr0-net/
# 19970  vault kv get secret/cdr0-net
# 19971  vault kv get secret/cdr0-net/
# 19972  vault kv get secret/cdr0-net/pw
# 19973  vault kv get secret/cdr0-net/pw --format=json
# 19974  vault kv get --format=json secret/cdr0-net/pw
# 19975  vault kv get --format=json secret/cdr0-net/pw | jq .
# 19976  vault kv get -field=pw secret/cdr0-net/pw
# 19977  vault kv get --field=pw secret/cdr0-net/pw
# 19978  vault kv put secret/reminders/app db_username=db.ruanbekker.com username=root password=secret
# 19979  vault kv get --format=json secret/reminders/app
# 19980  vault kv get --format=json secret/reminders/app | jq .
# 19981  vault kv delete secret/reminders

